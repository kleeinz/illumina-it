import { Injectable } from '@angular/core';
import { Http, Response, Headers, RequestOptions } from '@angular/http';
import { Router } from '@angular/router';
import { Observable } from "rxjs/Observable";
import { Auth } from '../models/auth.model';
import { User } from '../models/user.model';
import 'rxjs/Rx';

/*
 This service is specially to authenticate the user to the application
*/
@Injectable()
export class AuthService {

	private headers:Headers;
	private options:RequestOptions;
	private serverURL:string;
	public token:string;
	public user: User;

	 /**
  	The constructor initialize the variables declared above.
  	@param http The injection of the Http service
  	*/
	constructor(private http:Http, private router: Router) {
		this.headers = new Headers({ 'Content-Type': 'application/json' });
		this.options = new RequestOptions({ headers: this.headers });
		this.serverURL = "http://localhost:3000/api/";
	}

	/**
	* This method consumes a web service that authenticate to the user.
	* When everything is okay the method receives a response that contains a token
	* generated by the server and the user information. Then this method asign the user information
	* and the token to a local storage variable called userLogged.
	* @param auth The Auth model that contains the user information as username and password to authenticate 
	* @param wildcard controller name for the communication with the server
	*/
	public auth<Auth>(auth: Auth, wilcard:string) {
		console.log("Running auth method in service, sending user data: ", auth);
		return this.http.post(this.serverURL + wilcard + "/auth", JSON.stringify(auth), this.options)
				   .map((response: Response) => {
						 let data = response.json().data[0];
						 this.token = data.token;
						 this.user = data.user;
						 localStorage.setItem('userLogged', JSON.stringify({ user: data.user, token: data.token }));
						 return data;
					 }).catch(this.handleError);
	}

	/**
	* This method disconnect from the application to the user active.
	* Also reset the token, the user and remove the local storage called userLogged.
	* To end this method does a redirect to login view.
	*/
	public logout(): void {
		console.log("Disconnecting from the application...");
		this.token = null;
		this.user = null;
		localStorage.removeItem('userLogged');
		this.router.navigate(['/login']);
	}

  	/**
 	* This method extract the information of the response and get the correct json string
  	* @param res The response parameter from the server
  	* @return Json data with information about response
  	*/ 
	private extractData(res: Response):string {
		let body = res.json();
		return body || {};
	}

 	/**
  	* This method is an error handler that we use to detect a fail connection of the server
  	* @param error The error sent from server
  	*/
	private handleError(error: any) {
		let errMsg = (error.message) ? error.message :
		error.status ? `${JSON.parse(error._body).message}` : 'Unable connect to server';
		return Observable.throw(errMsg);
	}
}
