const express = require('express');

// CONFIGURATION
const config = require('../configs/config');
const errorSender = require('../configs/ErrorSender');
const Responser = require('../configs/Responser');
const status = require('../configs/StatusCodes');
const router = express.Router();

const User = require('../models/users');

/*
  This web service update an exist user in the database.
  Only will do changes in userType, image, name and user password only if this is modified.
 * @param request is the user to update, this object corresponds to the model object in the front end.
 * @param response is the user stored in the database.
*/
router.put('/update', (request, response) => {
  User.findOne({'_id': request.body._id})
      .then(user => {
          user.name = request.body.name;
          if (request.body.isModified)
              user.password = request.body.passwords.password;
          user.userType = request.body.userType;
          user.image = request.body.image;
          user.save().then(success => {
              return response.status(status.codes.ok).json(new Responser(success, status.codes.ok, 'The user has been updated.'));
          }).catch((err) => {
            return errorSender(err, response, status.codes.server);
          });
      }).catch(err => {
          return errorSender(err, response, status.codes.server);
      });

});

/* This web service creates a new User in the database. 
 * @param request is the User to create, this object corresponds to the model object in the front end.
 * @param response is the User stored in the database.
*/
router.post('/save', (request, response) => {
  let user = new User({
    username: request.body.username,
    name: request.body.name,
    password: request.body.passwords.password,
    userType: request.body.userType,
    image: request.body.image
  });
  user.save().then(success =>  {
    return response.status(status.codes.save).json(new Responser(success, status.codes.save, 'The user has been created.'));
  }).catch(err => {
    return errorSender(err, response, status.codes.server);
  });
});

/* This web service get All users in the database */
router.get('/find', (request, response) => {
  User.find().then(success => {
    return response.status(status.codes.ok).json(new Responser(success, status.codes.ok, 'The users have been got.'));
  }).catch(err => {
    return errorSender(err, response, status.codes.server);
  });
});

/* This web service search a username by id in the database */
router.get('/find/:username', (request, response) => {
  User.findOne({'username':request.params.username}).then(success => {
    return response.status(status.codes.ok).json(new Responser(success, status.codes.ok, 'The users has been got.'));
  }).catch(err => {
    return errorSender(err, response, status.codes.server);
  });

});

/* This web service remove a user from the database through user id generated by MongoDB */
router.post('/delete', (request, response) => {
  User.remove({'username': request.body.user.username}).then(data => {
      return response.status(status.codes.ok).json(new Responser(data, status.codes.ok, 'The object has been removed.'));
    }).catch(err => {
      return errorSender(err, response, status.codes.server);
    });
});

/* Exporting the controller to router */
module.exports = router;
